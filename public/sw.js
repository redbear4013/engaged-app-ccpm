// Service Worker for performance optimization and offline functionality
const CACHE_NAME = 'engaged-app-v1';
const STATIC_CACHE_NAME = 'engaged-static-v1';
const RUNTIME_CACHE_NAME = 'engaged-runtime-v1';

// Assets to cache on install
const STATIC_ASSETS = [
  '/',
  '/discover',
  '/calendar',
  '/ai-match',
  '/manifest.json',
  // Add critical CSS and JS files that get generated by Next.js
];

// API routes to cache with network-first strategy
const API_ROUTES = [
  '/api/events',
  '/api/calendar/events',
  '/api/user/preferences',
];

// Install event - cache static assets
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(STATIC_CACHE_NAME).then((cache) => {
      return cache.addAll(STATIC_ASSETS);
    })
  );
  self.skipWaiting();
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (
            cacheName !== CACHE_NAME &&
            cacheName !== STATIC_CACHE_NAME &&
            cacheName !== RUNTIME_CACHE_NAME
          ) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  self.clients.claim();
});

// Fetch event - implement caching strategies
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip cross-origin requests
  if (url.origin !== location.origin) {
    return;
  }

  // Handle different types of requests with appropriate caching strategies
  if (request.destination === 'image') {
    // Images: Cache first, network fallback
    event.respondWith(cacheFirst(request, STATIC_CACHE_NAME));
  } else if (url.pathname.startsWith('/api/')) {
    // API routes: Network first, cache fallback
    event.respondWith(networkFirst(request, RUNTIME_CACHE_NAME));
  } else if (url.pathname.startsWith('/_next/static/')) {
    // Static assets: Cache first (immutable)
    event.respondWith(cacheFirst(request, STATIC_CACHE_NAME, 31536000)); // 1 year
  } else if (request.destination === 'document') {
    // HTML pages: Network first, cache fallback
    event.respondWith(networkFirst(request, RUNTIME_CACHE_NAME));
  } else {
    // Other assets: Stale while revalidate
    event.respondWith(staleWhileRevalidate(request, RUNTIME_CACHE_NAME));
  }
});

// Cache-first strategy
async function cacheFirst(request, cacheName, maxAge = 86400) {
  const cache = await caches.open(cacheName);
  const cached = await cache.match(request);

  if (cached) {
    // Check if cached item is still fresh
    const cachedDate = new Date(cached.headers.get('sw-cache-timestamp') || 0);
    const isExpired = Date.now() - cachedDate.getTime() > maxAge * 1000;

    if (!isExpired) {
      return cached;
    }
  }

  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const responseClone = networkResponse.clone();
      // Add timestamp header before caching
      const responseWithTimestamp = new Response(responseClone.body, {
        status: responseClone.status,
        statusText: responseClone.statusText,
        headers: {
          ...Object.fromEntries(responseClone.headers.entries()),
          'sw-cache-timestamp': new Date().toISOString(),
        },
      });
      cache.put(request, responseWithTimestamp);
    }
    return networkResponse;
  } catch (error) {
    return cached || new Response('Offline', { status: 503 });
  }
}

// Network-first strategy
async function networkFirst(request, cacheName) {
  const cache = await caches.open(cacheName);

  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const responseClone = networkResponse.clone();
      const responseWithTimestamp = new Response(responseClone.body, {
        status: responseClone.status,
        statusText: responseClone.statusText,
        headers: {
          ...Object.fromEntries(responseClone.headers.entries()),
          'sw-cache-timestamp': new Date().toISOString(),
        },
      });
      cache.put(request, responseWithTimestamp);
    }
    return networkResponse;
  } catch (error) {
    const cached = await cache.match(request);
    return cached || new Response('Offline', { status: 503 });
  }
}

// Stale-while-revalidate strategy
async function staleWhileRevalidate(request, cacheName) {
  const cache = await caches.open(cacheName);
  const cached = await cache.match(request);

  // Always try to fetch from network in background
  const networkResponsePromise = fetch(request).then((networkResponse) => {
    if (networkResponse.ok) {
      const responseClone = networkResponse.clone();
      const responseWithTimestamp = new Response(responseClone.body, {
        status: responseClone.status,
        statusText: responseClone.statusText,
        headers: {
          ...Object.fromEntries(responseClone.headers.entries()),
          'sw-cache-timestamp': new Date().toISOString(),
        },
      });
      cache.put(request, responseWithTimestamp);
    }
    return networkResponse;
  });

  // Return cached version immediately if available
  return cached || networkResponsePromise;
}

// Background sync for offline actions
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    event.waitUntil(
      // Handle offline actions here
      syncOfflineActions()
    );
  }
});

async function syncOfflineActions() {
  // Implementation for syncing offline actions when connection is restored
  console.log('Background sync triggered');
}

// Push notifications (for future implementation)
self.addEventListener('push', (event) => {
  if (event.data) {
    const options = {
      body: event.data.text(),
      icon: '/icon-192x192.png',
      badge: '/icon-72x72.png',
      actions: [
        {
          action: 'view',
          title: 'View Event',
        },
        {
          action: 'dismiss',
          title: 'Dismiss',
        },
      ],
    };

    event.waitUntil(
      self.registration.showNotification('Engaged App', options)
    );
  }
});

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  if (event.action === 'view') {
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});